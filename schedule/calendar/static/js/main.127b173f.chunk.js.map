{"version":3,"sources":["constants/logCSS.js","reducers/mainReducer.js","constants/actionTypes.js","components/Day.jsx","constants/calendarTypes.js","actions/actions.js","components/Month.jsx","components/ThemesWitnesses.jsx","components/SelectedHearing.jsx","App.jsx","serviceWorker.js","index.js"],"names":["WARNING","SUCCESS","cl","msg","css","console","log","initState","isInit","themes","witnesses","hearings","displayHearing","selectedHearing","loadThemes","hearingsData","undefined","Logger","Map","entries","sort","a","b","localeCompare","loadWitnesses","lastName","mainReducer","state","action","current","Object","assign","type","tmpHearings","hearing","preppedHearing","set","has","hearingId","get","Day","this","props","selectHearing","timeStamp","showHearing","hideHearing","setTimeout","deSelectHearing","clearDay","className","cssClasses","today","Date","calendarType","selected","isCancelled","date","getFullYear","getMonth","getDate","onClick","handleDayClick","bind","React","Component","connect","ownProps","hasHearing","getTime","dispatch","hearingTS","Month","daysOfMonth","startWeekDay","getDay","clear","push","key","maxDaysInMonth","format","i","currentDate","monthClasses","ThemesWitnesses","witnessList","themeId","witnessId","prefix","firstName","title","fullName","fullTitle","ReactMarkdown","require","SelectedHearing","hearingTitleDate","notifications","source","style","color","fontWeight","buildingRoom","street","city","morningSession","afternoonSession","themesList","exhibitsList","size","keys","theme","exhibits","length","exhibit","href","axios","App","mainHeight","calendar","endTS","startDate","setDate","endDate","numMonths","visibleSlides","isMobile","endOfCarousel","newDate","setMonth","index","id","naturalSlideWidth","naturalSlideHeight","totalSlides","currentSlide","duration","height","then","res","initApp","data","appMode","initAppAction","Boolean","window","location","hostname","match","store","createStore","main","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","display","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.127b173f.chunk.js","sourcesContent":["export const ERROR = 'font-weight: bold; color: red';\r\nexport const WARNING = 'font-weight: bold; color: orange';\r\nexport const INFO = 'font-weight: bold; color: blue';\r\nexport const SUCCESS = 'font-weight: bold; color: green';\r\nexport const GENERAL = 'font-weight: bold; color: grey';\r\n\r\nexport function cl(msg, css) {\r\n    console.log('%c' + msg, css);\r\n}","import * as ActionTypes from '../constants/actionTypes';\r\nimport * as Logger from '../constants/logCSS';\r\n\r\nconst initState = {\r\n    isInit: false,\r\n    themes: null,\r\n    witnesses: null,\r\n    hearings: null,\r\n    displayHearing: false,\r\n    selectedHearing: null,\r\n};\r\n\r\nfunction mainReducer(state = initState, action) {\r\n    let current = Object.assign({}, state);\r\n    switch (action.type) {\r\n        case ActionTypes.INIT_APP:\r\n            current.themes = loadThemes(action.hearingsData);\r\n            current.witnesses = loadWitnesses(action.hearingsData);\r\n            if (action.hearingsData.hearings === undefined) {\r\n                Logger.cl('NO HEARINGS SCHEDULED', Logger.WARNING);\r\n                current.hearings = new Map();\r\n            } else {\r\n                let tmpHearings = new Map(action.hearingsData.hearings);\r\n                current.hearings = new Map();\r\n                for (const hearing of tmpHearings.entries()) {\r\n                    let preppedHearing = hearing[1];\r\n                    preppedHearing.themes = new Map(preppedHearing.themes);\r\n                    current.hearings.set(hearing[0], preppedHearing);\r\n                }\r\n            }\r\n            current.isInit = true;\r\n            Logger.cl('EDITOR INITIALIZED', Logger.SUCCESS);\r\n            break;\r\n        case ActionTypes.SELECT_HEARING:\r\n            if (current.hearings.has(action.hearingId)) {\r\n                current.selectedHearing = current.hearings.get(action.hearingId);\r\n                Logger.cl('SELECT HEARING', Logger.SUCCESS);\r\n            } else {\r\n                Logger.cl('HEARING NOT FOUND', Logger.WARNING);\r\n            }\r\n            break;\r\n        case ActionTypes.DESELECT_HEARING:\r\n            current.selectedHearing = null;\r\n            Logger.cl('DESELECTED HEARING', Logger.SUCCESS);\r\n            break;\r\n        case ActionTypes.SHOW_HEARING:\r\n            current.displayHearing = true;\r\n            break;\r\n        case ActionTypes.HIDE_HEARING:\r\n            current.displayHearing = false;\r\n            break;\r\n        default:\r\n    }\r\n    return current;\r\n}\r\n\r\nfunction loadThemes(hearingsData) {\r\n    let themes;\r\n    if (hearingsData.themes === undefined) {\r\n        Logger.cl('NO THEMES', Logger.WARNING);\r\n        themes = new Map();\r\n    } else {\r\n        themes = new Map(hearingsData.themes);\r\n    }\r\n    themes = new Map([...themes.entries()].sort((a, b) => a[1].localeCompare(b[1])));\r\n    return themes;\r\n}\r\n\r\nfunction loadWitnesses(hearingsData) {\r\n    let witnesses;\r\n    if (hearingsData.witnesses === undefined) {\r\n        Logger.cl('NO WITNESSES', Logger.WARNING);\r\n        witnesses = new Map();\r\n    } else {\r\n        witnesses = new Map(hearingsData.witnesses);\r\n    }\r\n    witnesses = new Map([...witnesses.entries()].sort((a, b) => a[1].lastName.localeCompare(b[1].lastName)));\r\n    return witnesses;\r\n}\r\n\r\nexport default mainReducer;","export const INIT_APP = 'INIT_APP';\r\nexport const SELECT_HEARING = 'SELECT_HEARING';\r\nexport const DESELECT_HEARING = 'DESELECT_HEARING';\r\nexport const SHOW_HEARING = 'SHOW_HEARING';\r\nexport const HIDE_HEARING = 'HIDE_HEARING';\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as CalendarType from '../constants/calendarTypes';\r\nimport { selectHearingAction } from '../actions/actions';\r\nimport { deSelectHearingAction } from '../actions/actions';\r\nimport { showHearingAction } from '../actions/actions';\r\nimport { hideHearingAction } from '../actions/actions';\r\n\r\nclass Day extends React.Component {\r\n    handleDayClick() {\r\n        if (this.props.selectedHearing === null) {\r\n            this.props.selectHearing(this.props.hearing.timeStamp);\r\n            this.props.showHearing();\r\n        } else {\r\n            if (this.props.selectedHearing.timeStamp === this.props.hearing.timeStamp) {\r\n                this.props.hideHearing();\r\n                setTimeout(() => { this.props.deSelectHearing(); }, 600);\r\n\r\n            } else {\r\n                this.props.hideHearing();\r\n                setTimeout(\r\n                    () => {\r\n                        this.props.selectHearing(this.props.hearing.timeStamp);\r\n                        this.props.showHearing();\r\n                    }, 750);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.clearDay) {\r\n            return (\r\n                <div className=\"ClearDay\"></div>\r\n            );\r\n        } else {\r\n            let cssClasses = '';\r\n            let today = new Date();\r\n            if (this.props.calendarType === CalendarType.EXHIBITS || this.props.calendarType === CalendarType.CALENDAR) {\r\n                cssClasses = 'DayNoSelection';\r\n            } else {\r\n                cssClasses = 'Day';\r\n            }\r\n            if (this.props.calendarType !== CalendarType.EXHIBITS && this.props.selected) {\r\n                cssClasses += ' SelectedDay';\r\n            } else if (this.props.hearing !== null) {\r\n                if (this.props.hearing.isCancelled) {\r\n                    cssClasses += ' CancelledHearing';\r\n                } else {\r\n                    cssClasses += ' EvidentiaryHearing';\r\n                }\r\n            } else if (this.props.date.getFullYear() === today.getFullYear() && this.props.date.getMonth() === today.getMonth() && this.props.date.getDate() === today.getDate() && this.props.calendarType === CalendarType.EDITOR) {\r\n                cssClasses += ' CurrentDay';\r\n            }\r\n            return (\r\n                <div className={ cssClasses } onClick={ this.handleDayClick.bind(this) }>{ this.props.date.getDate() }</div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let hasHearing = null;\r\n    if (ownProps.date !== undefined && state.hearings.has(ownProps.date.getTime())) {\r\n        hasHearing = state.hearings.get(ownProps.date.getTime());\r\n    }\r\n    return {\r\n        hearing: hasHearing,\r\n        displayHearing: state.displayHearing,\r\n        selectedHearing: state.selectedHearing\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectHearing: (hearingTS) => { dispatch(selectHearingAction(hearingTS)) },\r\n        deSelectHearing: () => { dispatch(deSelectHearingAction()) },\r\n        showHearing: () => { dispatch(showHearingAction()) },\r\n        hideHearing: () => { dispatch(hideHearingAction()) }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Day);\r\n","export const CALENDAR = 'CALENDAR';\r\nexport const EDITOR = 'EDITOR';\r\nexport const EXHIBITS = 'EXHIBITS';\r\n","import * as ActionTypes from '../constants/actionTypes';\r\n\r\nexport function initAppAction(hearingsData) {\r\n    return { type: ActionTypes.INIT_APP, hearingsData }\r\n}\r\n\r\nexport function selectHearingAction(hearingId) {\r\n    return { type: ActionTypes.SELECT_HEARING, hearingId }\r\n}\r\n\r\nexport function deSelectHearingAction() {\r\n    return { type: ActionTypes.DESELECT_HEARING }\r\n}\r\n\r\nexport function showHearingAction() {\r\n    return { type: ActionTypes.SHOW_HEARING }\r\n}\r\n\r\nexport function hideHearingAction() {\r\n    return { type: ActionTypes.HIDE_HEARING }\r\n}\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Day from './Day';\r\n\r\nclass Month extends React.Component {\r\n  render() {\r\n    let daysOfMonth = [];\r\n    let startWeekDay = this.props.date.getDay();\r\n    if (startWeekDay !== 0) {\r\n      for (let clear = 0; clear < startWeekDay; clear++) {\r\n        daysOfMonth.push(<Day key={ clear } clearDay={ true }></Day>)\r\n      }\r\n    }\r\n    let maxDaysInMonth = this.props.date.format('t');\r\n    for (let i = 1; i <= maxDaysInMonth; i++) {\r\n      let currentDate = new Date(this.props.date.getFullYear(), this.props.date.getMonth(), i);\r\n      daysOfMonth.push(<Day key={ currentDate.getTime() } date={ currentDate } calendarType={this.props.calendarType}></Day>);\r\n    }\r\n    let monthClasses = 'Month';\r\n    let today = new Date();\r\n    if (this.props.date.getFullYear() === today.getFullYear() && this.props.date.getMonth() === today.getMonth()) {\r\n      monthClasses += ' CurrentMonth';\r\n    }\r\n    return (\r\n      <div className={ monthClasses }>\r\n        <div>\r\n          <h2 className=\"MonthName\">{ this.props.date.format('F') } <span className=\"YearTitle\">{ this.props.date.getFullYear() }</span></h2>\r\n        </div>\r\n        <div className=\"DaysOfMonth\">\r\n          <p className=\"WeekNames\">Sun</p>\r\n          <p className=\"WeekNames\">Mon</p>\r\n          <p className=\"WeekNames\">Tue</p>\r\n          <p className=\"WeekNames\">Wed</p>\r\n          <p className=\"WeekNames\">Thu</p>\r\n          <p className=\"WeekNames\">Fri</p>\r\n          <p className=\"WeekNames\">Sat</p>\r\n          { daysOfMonth }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    \r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Month);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ThemesWitnesses extends React.Component {\r\n    render() {\r\n        let witnessList = [];\r\n        for (const witnessId of this.props.hearing.themes.get(this.props.themeId)) {\r\n            let prefix = this.props.witnesses.get(witnessId).prefix;\r\n            let firstName = this.props.witnesses.get(witnessId).firstName;\r\n            let lastName = this.props.witnesses.get(witnessId).lastName;\r\n            let title = this.props.witnesses.get(witnessId).title;\r\n            let fullName = '';\r\n            if (prefix !== '') {\r\n                fullName = prefix + ' ';\r\n            }\r\n            fullName += firstName + ' ' + lastName;\r\n            let fullTitle = '';\r\n            if (title !== '') {\r\n                fullTitle = ', (' + title + ')';\r\n            }\r\n            witnessList.push(<p className=\"WitnessListNames\"><strong>{fullName}</strong>{fullTitle}</p>)\r\n        }\r\n        return (\r\n            <div className=\"HearingTheme\">\r\n                <p className=\"HearingThemeName\">{this.props.themes.get(this.props.themeId)}</p>\r\n                {witnessList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        hearing: state.selectedHearing,\r\n        themes: state.themes,\r\n        witnesses: state.witnesses\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ThemesWitnesses);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ThemesWitnesses from './ThemesWitnesses';\r\n\r\nconst ReactMarkdown = require('react-markdown');\r\n\r\nclass SelectedHearing extends React.Component {\r\n    render() {\r\n        let hearingTitleDate = ''\r\n        let notifications = [];\r\n        if (this.props.hearing !== null) {\r\n            if (this.props.hearing.notifications !== '') {\r\n                notifications.push(\r\n                    (\r\n                        <div key=\"Notifications\">\r\n                            <h2 className=\"HearingFormSectionTitle\">Notifications</h2>\r\n                            <div className=\"MarkdownPreview\">\r\n                                <ReactMarkdown source={this.props.hearing.notifications} />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                );\r\n            }\r\n            if (this.props.hearing.isCancelled) {\r\n                hearingTitleDate = new Date(this.props.hearing.timeStamp).format('F j, Y');\r\n                return (\r\n                    <div className=\"SelectedHearing\">\r\n                        <h2 className=\"HearingFormSectionTitle\">{hearingTitleDate} <span style={{ color: 'red', fontWeight: '400' }}>Hearing Cancelled</span></h2>\r\n                        {notifications}\r\n                    </div>\r\n                );\r\n            } else {\r\n                let themesList = [];\r\n                let exhibitsList = [];\r\n                let buildingRoom = '';\r\n                let street = '';\r\n                let city = '';\r\n                let morningSession = '';\r\n                let afternoonSession = '';\r\n                hearingTitleDate = new Date(this.props.hearing.timeStamp).format('F j, Y');\r\n                buildingRoom = this.props.hearing.buildingRoom;\r\n                street = this.props.hearing.street;\r\n                city = this.props.hearing.city;\r\n                morningSession = this.props.hearing.morningSession;\r\n                afternoonSession = this.props.hearing.afternoonSession;\r\n                if (this.props.hearing.themes.size === 0) {\r\n                    themesList.push(<p key=\"NoThemesScheduled\">There are no themes scheduled for this hearing.</p>)\r\n                } else {\r\n                    for (const theme of this.props.hearing.themes.keys()) {\r\n                        themesList.push(<ThemesWitnesses key={theme} themeId={theme}></ThemesWitnesses>)\r\n                    }\r\n                }\r\n                if (this.props.hearing.exhibits.length === 0) {\r\n                    exhibitsList.push(<p key=\"NoExhibitsEntered\">There are no exhibits for this hearing.</p>)\r\n                } else {\r\n                    for (const exhibit of this.props.hearing.exhibits) {\r\n                        exhibitsList.push(<p key={exhibit}><a href={'/data/exhibits/' + exhibit}>{exhibit}</a></p>);\r\n                    }\r\n                }\r\n                return (\r\n                    <div className=\"SelectedHearing\">\r\n                        <h2 className=\"HearingFormSectionTitle\">{hearingTitleDate}</h2>\r\n                        <div className=\"HearingInfo\">\r\n                            <p className=\"LocationTimeTitle\">Address:</p>\r\n                            <p className=\"LocationTimeInfo\">{buildingRoom}<br />{street}<br />{city}</p>\r\n                            <p className=\"LocationTimeTitle\">Session Times:</p>\r\n                            <p className=\"LocationTimeInfo\">Morning Session: {morningSession}<br />Afternoon Session: {afternoonSession}</p>\r\n                            {notifications}\r\n                            <h2 className=\"HearingFormSectionTitle\">Themes</h2>\r\n                            {themesList}\r\n                            <h2 className=\"HearingFormSectionTitle\">Exhibits</h2>\r\n                            {exhibitsList}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            return (\r\n                <div className=\"SelectedHearing\">\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        hearing: state.selectedHearing\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedHearing);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';\nimport 'pure-react-carousel/dist/react-carousel.es.css';\nimport AnimateHeight from 'react-animate-height';\nimport { isMobile } from 'react-device-detect';\nimport Month from './components/Month';\nimport SelectedHearing from './components/SelectedHearing';\nimport * as CalendarType from './constants/calendarTypes';\nimport { initAppAction } from './actions/actions';\n\nconst axios = require('axios');\n\nclass App extends React.Component {\n\n  render() {\n    if (this.props.isInit) {\n      let mainHeight = 0;\n      if (this.props.displayHearing) {\n        mainHeight = 'auto';\n      }\n      let calendar = [];\n      let endTS = 0;\n      for (const hearingTS of this.props.hearings.keys()) {\n        endTS = (hearingTS > endTS) ? hearingTS : endTS;\n      }\n      let startDate = new Date(2020, 0, 1, 0, 0, 0, 0);\n      startDate.setDate(1);\n      let endDate = new Date(endTS);\n      let numMonths = (endDate.getFullYear() - startDate.getFullYear()) * 12;\n      numMonths -= startDate.getMonth() + 1;\n      numMonths += endDate.getMonth() + 2;  // Adds an extra month to allow for adding new dates beyond the last month.\n      numMonths = ((numMonths <= 3) ? 3 : numMonths) + 1;  // Make sure it always has three months.\n      let visibleSlides = (isMobile) ? 1 : 3;\n      let endOfCarousel = (isMobile) ? numMonths - visibleSlides - 2 : numMonths - visibleSlides - 1;  // Subtract 1 so that the carousel scrolls to the correct month.\n      for (let i = 0; i < numMonths; i++) {\n        let newDate = new Date(startDate)\n        newDate.setMonth(startDate.getMonth() + i);\n        calendar.push(<Slide index={i} key={newDate.getTime()}><Month date={newDate} calendarType={CalendarType.CALENDAR}></Month></Slide>);\n      }\n      return (\n        <div id=\"App\">\n          <div className=\"HearingsCalendarApp\">\n            <CarouselProvider naturalSlideWidth={287} naturalSlideHeight={302} totalSlides={numMonths} visibleSlides={visibleSlides} currentSlide={endOfCarousel}>\n              <Slider>\n                {calendar}\n              </Slider>\n              <ButtonBack><i className=\"fas fa-chevron-left\"></i></ButtonBack>\n              <ButtonNext><i className=\"fas fa-chevron-right\"></i></ButtonNext>\n            </CarouselProvider>\n          </div>\n          <AnimateHeight duration={500} height={mainHeight}>\n            <SelectedHearing></SelectedHearing>\n          </AnimateHeight>\n        </div>\n      );\n    } else {\n      axios.get('/data/hearings.json')\n        .then((res) => {\n          this.props.initApp(res.data);\n        });\n      return (\n        <div id=\"App\">\n        </div>\n      );\n    }\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isInit: state.isInit,\n    appMode: state.appMode,\n    hearings: state.hearings,\n    displayHearing: state.displayHearing\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    initApp: (hearingsData) => { dispatch(initAppAction(hearingsData)) }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport main from './reducers/mainReducer';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(main, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\ndocument.getElementById('IEMessage').style.display = 'none';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}